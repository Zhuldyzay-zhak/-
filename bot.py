from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
import sqlite3

API_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY, 
                name TEXT, 
                age INTEGER, 
                city TEXT, 
                interests TEXT, 
                photo TEXT)""")
conn.commit()

# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("–ù–∞–π—Ç–∏ –ø–æ–¥—Ä—É–≥—É"), KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
    user = cursor.fetchone()
    
    if user:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=kb)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        dp.register_message_handler(get_name)

async def get_name(message: types.Message):
    name = message.text
    user_id = message.from_user.id
    dp.register_message_handler(get_age, state={'name': name})

async def get_age(message: types.Message, state):
    age = message.text
    if not age.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏!")
        return
    state['age'] = int(age)
    await message.answer("–í –∫–∞–∫–æ–º —Ç—ã –≥–æ—Ä–æ–¥–µ?")
    dp.register_message_handler(get_city, state=state)

async def get_city(message: types.Message, state):
    city = message.text
    state['city'] = city
    await message.answer("–ö–∞–∫–∏–µ —É —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—ã? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    dp.register_message_handler(get_interests, state=state)

async def get_interests(message: types.Message, state):
    interests = message.text
    state['interests'] = interests
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
    dp.register_message_handler(get_photo, content_types=types.ContentType.PHOTO, state=state)

async def get_photo(message: types.Message, state):
    photo_id = message.photo[-1].file_id
    state['photo'] = photo_id
    user_id = message.from_user.id
    
    cursor.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?, ?)", 
                   (user_id, state['name'], state['age'], state['city'], state['interests'], state['photo']))
    conn.commit()
    
    await message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {state['name']}! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –ø–æ–¥—Ä—É–≥.", reply_markup=kb)

@dp.message_handler(lambda message: message.text == "–ù–∞–π—Ç–∏ –ø–æ–¥—Ä—É–≥—É")
async def find_friend(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT city, interests, age FROM users WHERE id=?", (user_id,))
    user = cursor.fetchone()
    
    if user:
        city, interests, age = user
        cursor.execute("SELECT * FROM users WHERE city=? AND id!=? AND ABS(age - ?) <= 5", (city, user_id, age))
        matches = cursor.fetchall()
        
        if matches:
            friend = matches[0]
            photo = friend[5]
            await bot.send_photo(message.chat.id, photo, caption=f"–ù–∞—à–ª–∞—Å—å –ø–æ–¥—Ä—É–≥–∞: {friend[1]}, {friend[2]} –ª–µ—Ç. –ò–Ω—Ç–µ—Ä–µ—Å—ã: {friend[4]}")
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Ä—É–≥ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ üòû")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /start!")

executor.start_polling(dp, skip_updates=True)
